name: Build soda-sql

on:
  push:
    paths-ignore:
      - '**.md'

jobs:
  run-tests:
    name: Run Tests
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]
        test-module: [ local, RedshiftSuite, SnowflakeSuite, AthenaSuite, BigQuerySuite ]
    env:
      TEST_MODULE: ${{ matrix.test-module }}
      PYTHON_VERSION: ${{ matrix.python-version }}
      SODA_SNOWFLAKE_USERNAME: ${{ secrets.SODA_SNOWFLAKE_USERNAME }}
      SODA_SNOWFLAKE_PASSWORD: ${{ secrets.SODA_SNOWFLAKE_PASSWORD }}
      SODA_REDSHIFT_USERNAME: ${{ secrets.SODA_REDSHIFT_USERNAME }}
      SODA_REDSHIFT_PASSWORD: ${{ secrets.SODA_REDSHIFT_PASSWORD }}
      BIGQUERY_ACCOUNT_INFO_JSON: ${{ secrets.BIGQUERY_ACCOUNT_INFO_JSON }}
      SODA_ATHENA_ACCESS_KEY_ID: ${{ secrets.AWS_TESTEXECUTOR_ACCESS_KEY_ID }}
      SODA_ATHENA_SECRET_ACCESS_KEY: ${{ secrets.AWS_TESTEXECUTOR_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Extract Branch Name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Run Tox
        run: |
          cat dev-requirements.in | grep tox | xargs pip install
          pip install -r requirements.txt
          tox -- \
            --html=./reports/${{ steps.extract_branch.outputs.branch }}/${{ matrix.python-version }}/${{ matrix.test-module }}/tests/index.html \
            --cov=sodasql tests \
            --cov-report=html:./reports/${{ steps.extract_branch.outputs.branch }}/${{ matrix.python-version }}/${{ matrix.test-module }}/coverage \
            -k ${{ matrix.test-module }}
      - name: Copy Reports Index Page
        if: always()
        run: |
          cp ./reports/index.html ./reports/${{ steps.extract_branch.outputs.branch }}/${{ matrix.python-version }}/${{ matrix.test-module }}/index.html
      - name: Store Reports
        uses: actions/upload-artifact@v2
        with:
          name: soda-sql-tox-reports-${{ matrix.python-version }}
          path: ./reports
          retention-days: 5
      - name: Notify on Test Failure
        if: failure()
        env:
          JOB_ID: ${{ github.job }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          REPORTS_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: .github/scripts
        run: |
          pip3 install -r requirements.txt
          python3 report_test_failure.py

  inform-test-success:
    name: Inform Test Success
    runs-on: ubuntu-20.04
    needs: [ run-tests ]
    env:
      JOB_ID: ${{ github.job }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      REPORTS_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - name: Notify on Success
        working-directory: .github/scripts
        run: |
          pip3 install -r requirements.txt
          python3 report_test_success.py
  publish-pypi:
    name: Build & Publish Package
    if: contains(github.ref, 'refs/tags/')
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    needs: [ run-tests ]
    env:
      JOB_ID: ${{ github.job }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      REPORTS_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Setup dependencies
        run: pip install --upgrade setuptools wheel twine
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Build and publish packages
        # Hacky version for now :)
        run: |
          cd core
          python3 setup.py sdist bdist_wheel
          twine upload dist/*
          cd ../packages
          for pack in *
          do
            pushd .
            cd $pack
            python3 setup.py sdist bdist_wheel
            twine upload dist/*
            popd
          done

      - name: Notify on Release Failure
        if: failure()
        working-directory: .github/scripts
        run: |
          pip3 install -r requirements.txt
          python3 report_release_failure.py
  inform-release-success:
    name: Inform Release Success
    runs-on: ubuntu-20.04
    needs: [ publish-pypi ]
    env:
      JOB_ID: ${{ github.job }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - name: Notify on Release Success
        working-directory: .github/scripts
        run: |
          pip3 install -r requirements.txt
          python3 report_release_success.py
